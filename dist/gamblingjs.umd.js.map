{"version":3,"file":"gamblingjs.umd.js","sources":["../src/constants.ts","../node_modules/kombinatoricsjs/src/kombinatoricsjs.ts","../src/routines.ts","../src/hashesCreator.ts","../src/pokerEvaluators.ts","../src/gamblingjs.ts"],"sourcesContent":["/**\n * think of using typed array for performance reasons as these data is accessed very often\n * 8bit or 16bits arrays can be used\n */\nimport { NumberMap } from './interfaces'\nimport { NumberToStringMap } from './interfaces'\n\nexport const flushHash: number[] = [1, 2, 4, 8, 16, 32, 64, 128, 255, 508, 1012, 2016, 4016] // 13 one for each rank\n\nexport const suitsHash: number[] = [0, 57, 1, 8] // 4 one for each suit\n\n/**check for !==undefined */\nexport const flush5hHashCheck: Readonly<NumberMap> = {\n  '0': 0,\n  '5': 1,\n  '40': 8,\n  '285': 57\n}\n\nexport const flush7HashCheck: Readonly<NumberMap> = {\n  '0': 0,\n  '1': 0,\n  '2': 0,\n  '5': 1,\n  '6': 1,\n  '7': 1,\n  '8': 0,\n  '9': 0,\n  '13': 1,\n  '14': 1,\n  '16': 0,\n  '21': 1,\n  '40': 8,\n  '41': 8,\n  '42': 8,\n  '48': 8,\n  '49': 8,\n  '56': 8,\n  '57': 0,\n  '58': 0,\n  '62': 1,\n  '63': 1,\n  '65': 0,\n  '70': 1,\n  '97': 8,\n  '98': 8,\n  '105': 8,\n  '114': 0,\n  '119': 1,\n  '154': 8,\n  '285': 57,\n  '286': 57,\n  '287': 57,\n  '293': 57,\n  '294': 57,\n  '301': 57,\n  '342': 57,\n  '343': 57,\n  '350': 57,\n  '399': 57\n}\n\nexport const ranksHashOn7: number[] = [] // 13 one for each rank\n\nranksHashOn7[0] = 0\nranksHashOn7[1] = 1\nranksHashOn7[2] = 5\nranksHashOn7[3] = 22\nranksHashOn7[4] = 98\nranksHashOn7[5] = 453\nranksHashOn7[6] = 2031\nranksHashOn7[7] = 8698\nranksHashOn7[8] = 22854\nranksHashOn7[9] = 83661\nranksHashOn7[10] = 262349\nranksHashOn7[11] = 636345\nranksHashOn7[12] = 1479181\n\nexport const ranksHashOn5: number[] = [] // one for each rank\n\nranksHashOn5[0] = 0 // 2\nranksHashOn5[1] = 1 // 3\nranksHashOn5[2] = 5 // 4\nranksHashOn5[3] = 22 // 5\nranksHashOn5[4] = 94 // 6\nranksHashOn5[5] = 312 // 7\nranksHashOn5[6] = 992 // 8\nranksHashOn5[7] = 2422 // 9\nranksHashOn5[8] = 5624 // 10\nranksHashOn5[9] = 12522 // J\nranksHashOn5[10] = 19998 // Q\nranksHashOn5[11] = 43258 // K\nranksHashOn5[12] = 79415 // A\n\n/* \narrays initialization\n*/\nexport const deckOfRanks_5: number[] = new Array(52)\nexport const deckOfRanks_7: number[] = new Array(52)\nexport const deckOfFlushes: number[] = new Array(52)\nexport const deckOfSuits: number[] = new Array(52)\n\nexport const fullCardsDeckHash_5: number[] = new Array(52)\nexport const fullCardsDeckHash_7: number[] = new Array(52)\n\nexport const cardHashToDescription_5: NumberToStringMap = {}\nexport const cardHashToDescription_7: NumberToStringMap = {}\n\nfor (let i: number = 0; i < 52; i++) {\n  deckOfRanks_5[i] = ranksHashOn5[i % 13];\n  deckOfRanks_7[i] = ranksHashOn7[i % 13];\n  deckOfFlushes[i] = flushHash[i % 13];\n  deckOfSuits[i] = suitsHash[~~(i / 13)];\n\n  let card5 = (fullCardsDeckHash_5[i] = (deckOfRanks_5[i] << 9) + deckOfSuits[i]);\n  let card7 = (fullCardsDeckHash_7[i] = (deckOfRanks_7[i] << 9) + deckOfSuits[i]);\n  cardHashToDescription_5[card5] = i;\n  cardHashToDescription_7[card7] = i;\n}\n\nexport const STRAIGHTS: number[][] = [\n  [12, 0, 1, 2, 3],\n  [0, 1, 2, 3, 4],\n  [1, 2, 3, 4, 5],\n  [2, 3, 4, 5, 6],\n  [3, 4, 5, 6, 7],\n  [4, 5, 6, 7, 8],\n  [5, 6, 7, 8, 9],\n  [6, 7, 8, 9, 10],\n  [7, 8, 9, 10, 11],\n  [8, 9, 10, 11, 12]\n]\n\nexport const rankCards: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nexport const HIGH_CARDS_5_AMOUNT: number = 1277\nexport const FLUSHES_BASE_START: number = 5864\nexport const STRAIGHT_FLUSH_BASE_START: number = 7453;\nexport const FLUSH_MASK: number = 511;\nexport const STRAIGHT_FLUSH_OFFSET: number = 1599;\nexport const handsRankingDelimiter_5cards: number[] = [\n  1277,\n  4137,\n  4995,\n  5853,\n  5863,\n  7140,\n  7296,\n  7452,\n  7462\n]\n/**\n * fill with these:\n * https://en.wikipedia.org/wiki/Poker_probability\n */\nexport const distinctHandsQuantityByGroup = {\n  HIGH_CARD: 1277,\n  ONE_PAIR: 2860,\n  TWO_PAIR: 858,\n  THREE_OF_A_KIND: 858,\n  STRAIGHT: 10,\n  FLUSH: 1277,\n  FULL_HOUSE: 156,\n  FOUR_OF_A_KIND: 156,\n  STRAIGHT_FLUSH: 10\n}\n/**\n * @TODO make function to work with non full decks. ex. deck of 40 cards\n *\n * */\n\n/**\n * @TODO prepare similar stuff for dice suited poker\n *\n * */\n","/*TYPEDEFS?\ntype CallbackFunctionVariadicAnyReturn = (...args: any[]) => any;\ntype CallbackFunctionSomeVariadic =\n  (arg1: string, arg2: number, ...args: any[]) => void;\n*/\ntype genericListFn = <S>(list: S[], ...args: any[]) => S[][]\n\nexport const factorial = (n: number): number => {\n  let f: number = 1\n  for (let i: number = 1; i < n + 1; ++i) {\n    f *= i\n  }\n  return f\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\nexport const cNK = (n: number, k: number): number => {\n  let i: number,\n    coeff: number = 1\n  if (n < k) return 0\n  if (n === k) return 1\n  for (i = n - k + 1; i <= n; ++i) coeff *= i\n  for (i = 1; i <= k; ++i) coeff /= i\n  return coeff\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\nexport const pNK = (n: number, k: number): number => {\n  let f: number = 1\n  for (let i: number = n - k + 1; i < n + 1; ++i) {\n    f *= i\n  }\n  return f\n}\n\nexport const matrixToArray = <S>(matrix: S[][]) => {\n  let arr: S[] = [],\n    c: number,\n    r: number,\n    lc: number = matrix.length,\n    lr: number,\n    row: any[]\n  for (c = 0; c < lc; ++c) {\n    row = matrix[c]\n    lr = row.length\n    for (r = 0; r < lr; ++r) {\n      arr.push(row[r])\n    }\n  }\n  return arr\n}\n\ntype combinatoricsFn = (...args: number[]) => number\ninterface numbersCacheMap {\n  [index: number]: number\n}\n/*@TODO improve memoize to work with a wider range of functions (at least combinatorics with numeric inputs*/\nconst memoize: (fn: combinatoricsFn) => combinatoricsFn = (\n  fn: combinatoricsFn\n): combinatoricsFn => {\n  const cache: numbersCacheMap = {}\n  return (n: number, k: number = 0): number => {\n    if (n < 256 && k <= n) {\n      let key = (n << 9) | k\n      let out = cache[key]\n      return out ? out : (cache[key] = fn(n, k))\n    } else return fn(n, k)\n  }\n}\n\nexport const memoize_factorial = memoize(factorial)\nexport const memoize_pNK = memoize(pNK)\nexport const memoize_cNK = memoize(cNK)\n\n/**\n *BoxMuller method\n */\nconst rnd_bmt = (): number[] => {\n  let x: number = 0,\n    y: number = 0,\n    rds: number,\n    c: number\n\n  // Get two random numbers from -1 to 1.\n  // If the radius is zero or greater than 1, throw them out and pick two new ones\n  // Rejection sampling throws away about 20% of the pairs.\n  do {\n    x = Math.random() * 2 - 1\n    y = Math.random() * 2 - 1\n    rds = x * x + y * y\n  } while (rds == 0 || rds > 1)\n\n  // This magic is the Box-Muller Transform\n  c = Math.sqrt((-2 * Math.log(rds)) / rds)\n\n  // It always creates a pair of numbers. I'll return them in an array.\n  // This function is quite efficient so don't be afraid to throw one away if you don't need both.\n  return [x * c, y * c]\n}\n\n/**\n *Central Limit method\n */\nconst rnd_snd = () => {\n  return Math.random() * 2 - 1 + (Math.random() * 2 - 1) + (Math.random() * 2 - 1)\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\n\nexport const shuffle = (ar: any[]): void => {\n  let i: number,\n    r: number,\n    tmp: any,\n    l: number = ar.length\n  for (i = 0; i < l; ++i) {\n    r = ~~(Math.random() * l)\n    ;[ar[r], ar[i]] = [ar[i], ar[r]]\n  }\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\n\nexport const boxMullerShuffle = (ar: any[]): void => {\n  let i: number,\n    r1: number,\n    r2: number,\n    tmp: any,\n    l: number = ar.length\n  for (i = 0; i < l / 2; ++i) {\n    ;[r1, r2] = rnd_bmt()\n    r1 = ~~((r1 + 1) * l)\n    r2 = ~~((r2 + 1) * l)\n    ;[ar[r1], ar[r2]] = [ar[r2], ar[r1]]\n  }\n}\n/**\n *@method\n *\n *@param\n *@return\n */\nexport const normalRandom = {\n  BoxMuller: rnd_bmt,\n  CentralLimit: rnd_snd\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\n\nexport const indexArray = (l: number) => {\n  let arr: number[] = []\n\n  if (!isNaN(l) && l > 0) {\n    for (let i = 0; i < l; ++i) {\n      arr[i] = i\n    }\n  }\n\n  return arr\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\n/*iterator for generating combinations call it nextCombination*/\n\nexport const binomIncrement = (idxVector: number[], maxVal: number) => {\n  let l: number, i: number, j: number\n  j = 0\n  l = idxVector.length\n  if (maxVal < l) return false //doesn't work if n<k\n  if (idxVector[l - 1] < maxVal) idxVector[l - 1]++\n  else {\n    //find value to increment\n    for (i = l - 1; i >= 0; i -= 1) {\n      if (idxVector[i] < maxVal - j) break\n      else j += 1\n    }\n    if (i < 0) return 0\n    //increment\n    idxVector[i] += 1\n    i += 1\n    //adjust successive values\n    for (i; i < l; i += 1) {\n      idxVector[i] = idxVector[i - 1] + 1\n    }\n  }\n\n  return 1\n}\n\nexport const combinationsIterator = (list: any[], k: number) => {\n  let n: number = list.length\n\n  var _index: number[] = indexArray(k)\n  var beginIndex: number[] = indexArray(k)\n\n  var _collection = list.slice()\n  var combination = new Array(k)\n  var count = 0\n\n  function setCombination() {\n    for (let i = 0; i < k; ++i) {\n      combination[i] = _collection[_index[i]]\n    }\n  }\n\n  setCombination()\n\n  var iterator = {\n    next: function() {\n      if (binomIncrement(_index, n - 1)) {\n        count++\n        setCombination()\n        return 1\n      } else {\n        return 0\n      }\n    },\n    getComb: function(cnt: number = 0) {\n      if (cnt > 0) {\n        var c = cnt - count\n        var step\n        while (c > 0 && (step = binomIncrement(_index, n - 1))) {\n          c--\n          count++\n        }\n\n        if (!step) return 0\n        setCombination()\n      }\n\n      return combination.slice()\n    },\n    getIndex: function() {\n      return _index\n    },\n    getCount: function() {\n      return count\n    },\n    reset: function() {\n      _index = indexArray(k)\n      setCombination()\n      count = 0\n    }\n  }\n  return iterator\n}\n\nexport const pick = (\n  n: number,\n  got: any[],\n  pos: number,\n  from: any[],\n  limit: number,\n  cntLimit: number,\n  callBack: Function\n): number => {\n  let cnt: number = 0,\n    limitCount: number = cntLimit\n  if (got.length == n) {\n    callBack(got)\n    return 1\n  }\n\n  for (let i: number = pos; i < from.length; i++) {\n    got.push(from[i])\n\n    if (limitCount === limit) {\n      cnt += pick(n, got, i + 1, from, limit, 0, callBack)\n      limitCount = 0\n    } else {\n      let next: number =\n        limitCount === 0 || got[got.length - 1] === got[got.length - 2]\n          ? limitCount + 1\n          : limitCount\n\n      cnt += pick(n, got, i, from, limit, next, callBack)\n    }\n\n    got.pop()\n  }\n\n  return cnt\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\n\nexport const combinations: genericListFn = (_collection: any[], k: number): any[][] => {\n  if (_collection.length < k || k < 1) {\n    return [_collection]\n  }\n\n  let comb: any[][] = []\n\n  pick(k, [], 0, _collection, 0, 0, (c: any[]) => {\n    comb.push(c.slice())\n  })\n\n  return comb\n}\n\nexport const pickMulti = (\n  n: number,\n  got: any[],\n  pos: number,\n  from: any[],\n  limit: number[],\n  limitCount: number[],\n  callBack: Function\n) => {\n  /*let limitCount = limitCnt.slice();*/\n\n  if (got.length == n) {\n    callBack(got)\n  }\n\n  for (let i: number = pos; i < from.length; i++) {\n    got.push(from[i])\n\n    if (limitCount[i] === limit[i]) {\n      limitCount[i] = 0\n      pickMulti(n, got, i + 1, from, limit, limitCount, callBack)\n    } else {\n      if (pos === 0 || limitCount[i] === 0 || got[got.length - 1] === got[got.length - 2]) {\n        limitCount[i]++\n      }\n      pickMulti(n, got, i, from, limit, limitCount, callBack)\n    }\n\n    got.pop()\n  }\n\n  return 1\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\nexport const multiCombinations = (_collection: any[], n: number, repetition: number): any[][] => {\n  let multiComb: any[][] = []\n\n  pick(n, [], 0, _collection, repetition, 0, (c: any[]) => {\n    multiComb.push(c.slice())\n  })\n\n  return multiComb\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\nexport const combinationsMultiSets = (_collection: any[], n: number): any[][] => {\n  var l = _collection.length,\n    limitCount = [0],\n    limits = [0],\n    list = [_collection[0]],\n    j = 0\n\n  for (var i = 1; i < l; ++i) {\n    if (_collection[i] === _collection[i - 1]) {\n      limits[j]++\n    } else {\n      j++\n      list[j] = _collection[i]\n      limitCount.push(0)\n      limits.push(0)\n    }\n  }\n  var multiComb: any[][] = []\n\n  pickMulti(n, [], 0, list, limits, limitCount, (c: any[]) => {\n    multiComb.push(c.slice())\n  })\n\n  return multiComb\n}\n\n/*@TODO use destructuring*/\nfunction swap(items: any[], i: number, j: number) {\n  var temp = items[i]\n  items[i] = items[j]\n  items[j] = temp\n}\n\n/*standard callback slices items and returns it*/\nexport const heapPermute = (n: number, items: any[], callBack: Function) => {\n  if (n === 1) {\n    callBack(items, n)\n  } else {\n    for (var i = 0; i < n; ++i) {\n      heapPermute(n - 1, items, callBack)\n      if (n % 2 === 1) {\n        swap(items, 0, n - 1)\n      } else {\n        swap(items, i, n - 1)\n      }\n    }\n  }\n}\n\nexport const permutations = (list: any[]): any[][] => {\n  var p = indexArray(list.length)\n  var i = 1,\n    j\n  var n = list.length\n  var perms: any[][] = [list.slice()]\n  while (i < n) {\n    p[i]--\n    j = i % 2 ? p[i] : 0\n\n    swap(list, i, j)\n    perms.push(list.slice())\n\n    i = 1\n    while (p[i] === 0) {\n      p[i] = i\n      i++\n    }\n  }\n\n  return perms\n}\n\nexport const permutationsNK = (list: any[], k: number): any[][] => {\n  let permsNK: any[][] = []\n  let _combsNK = combinations(list, k)\n  for (let i = 0; i < _combsNK.length; ++i) {\n    permsNK.push(permutations(_combsNK[i]))\n  }\n  return matrixToArray(permsNK)\n}\n\n/*not exposed*/\nconst nextPermutation = (list: any[], index: number[], callBack: Function) => {\n  let n = list.length\n  let i = 1,\n    j\n  while (index[i] === 0) {\n    index[i] = i\n    i++\n  }\n  if (i < n) {\n    index[i]--\n    j = i % 2 ? index[i] : 0\n\n    swap(list, i, j)\n    return callBack(list)\n  } else return 0\n}\n\n/*not exposed*/\nconst nextPermutationLexi = (list: any[]) => {\n  var n = list.length\n  var i = n - 1\n  while (i > 0 && list[i - 1] >= list[i]) {\n    i--\n  }\n  if (i <= 0) return 0\n  var j = n - 1\n\n  while (list[j] <= list[i - 1]) {\n    j--\n  }\n  swap(list, i - 1, j)\n  /*then reverse items from i+1 to j*/\n  j = n - 1\n  while (i < j) {\n    swap(list, i, j)\n    i++\n    j--\n  }\n\n  return 1\n}\n\nconst makeIndex = (list: any[]) => {\n  let n: number = list.length\n  let index: number[] = indexArray(n)\n  let j = 0,\n    k = 0\n\n  for (var i = 1; i < n; ++i) {\n    if (list[i] === list[i - 1]) {\n      index[i] = index[i - 1] = j\n    } else {\n      j++\n      index[i] = j\n    }\n  }\n  return index\n}\n\nexport const permutationsIterator = (list: any[]) => {\n  var n = list.length\n\n  var _index = indexArray(n)\n  var beginIndex = indexArray(n)\n\n  var _collection = list.slice()\n  var permutation = list.slice()\n  var count = 0\n\n  function setPermutation() {\n    for (var i = 0; i < n; ++i) {\n      permutation[i] = _collection[_index[i]]\n    }\n  }\n\n  var iterator = {\n    next: function() {\n      if (nextPermutationLexi(_index)) {\n        count++\n        setPermutation()\n        return 1\n      } else {\n        return 0\n      }\n    },\n    getPerm: function(cnt: number = 0) {\n      if (cnt > 0) {\n        var c = cnt - count\n        var step\n        while (c > 0 && (step = nextPermutationLexi(_index))) {\n          c--\n          count++\n        }\n\n        if (!step) return 0\n        setPermutation()\n      }\n\n      return permutation.slice()\n    },\n    getIndex: function() {\n      return _index\n    },\n    getCount: function() {\n      return count\n    },\n    reset: function() {\n      _index = indexArray(n)\n      setPermutation()\n      count = 0\n    }\n  }\n  return iterator\n}\n\nexport const permutationsMultiSets = (list: any[]): any[][] => {\n  var n = list.length,\n    index = indexArray(n)\n  var data = [list[0]],\n    perm: any[][] = [],\n    j = 0,\n    k = 0,\n    permutationMultiSet: any[][] = [list.slice()]\n  /*initializaition*/\n  for (var i = 1; i < n; ++i) {\n    if (list[i] === list[i - 1]) {\n      index[i] = index[i - 1] = j\n    } else {\n      j++\n      index[i] = j\n      data.push(list[i])\n    }\n  }\n\n  while (nextPermutationLexi(index)) {\n    for (k = 0; k < n; ++k) {\n      perm[k] = data[index[k]]\n    }\n\n    permutationMultiSet.push(perm.slice())\n  }\n\n  return permutationMultiSet\n}\n\nexport const permutationsNKMultiSets = (list: any[], k: number): any[][] => {\n  var permsNK: any[][] = []\n  var _combsNK = combinationsMultiSets(list, k)\n  for (var i = 0; i < _combsNK.length; ++i) {\n    permsNK.push(permutationsMultiSets(_combsNK[i]))\n  }\n  return matrixToArray(permsNK)\n}\n\nexport const crossProduct = (list: any[], k: number): any[][] => {\n  if (k < 1) return list\n  let crossProdList: any[][] = new Array(Math.pow(list.length, k))\n  let l = crossProdList.length\n  let ln = list.length\n\n  for (let i = 0; i < l; ++i) {\n    let tmpList: any[][] = []\n    let number = i\n    for (let j = k - 1; j >= 0; --j) {\n      let digit = number % ln\n      number = Math.floor(number / ln)\n      tmpList[j] = list[digit]\n    }\n    crossProdList[i] = tmpList\n  }\n  return crossProdList\n}\n\nexport const version = 1.0\n","import * as kombinatoricsJs from 'kombinatoricsjs';\nimport { hashRanking, NumberMap } from './interfaces';\nimport * as CONSTANTS from './constants';\n\nexport const atLeast5Eq = (list: (number | string)[][]): (number | string)[][] => {\n  return list.filter(v => {\n    let l = v.length;\n    let c = 0,\n      i = 1;\n    while (i < l) {\n      if (v[i] === v[i - 1]) {\n        c++;\n      } else {\n        c = 0;\n      }\n      i++;\n      if (c === 4) break;\n    }\n    return c >= 4;\n  });\n};\nexport const getVectorSum = (v: number[]): number => {\n  let l: number = v.length;\n  let s: number = 0;\n  for (let i: number = 0; i < l; i++) {\n    s += v[i];\n  }\n  return s;\n};\n\nexport const getFlushSuit7 = (v: number[]): number => {\n  let t: number = v[0];\n  let c: number = 0;\n  let i: number = 1;\n  while (i < 7) {\n    if (t !== v[i]) {\n      t = v[i];\n      c = 0;\n    } else {\n      c++;\n    }\n    i++;\n    /* istanbul ignore if  */\n    if (c === 4) break;\n  }\n  return t;\n};\n\nexport const checkStraight5on7 = (arr: number[]): boolean => {\n  let c: number = 0;\n  if (arr[6] === 12 && arr[0] === 0 && arr.includes(1) && arr.includes(2) && arr.includes(3)) {\n    return true;\n  }\n  for (let i = 1; i < arr.length; ++i) {\n    if (arr[i - 1] + 1 === arr[i]) {\n      c++;\n    } else {\n      c = 0;\n    }\n    /* istanbul ignore if  */\n    if (c === 4) break;\n  }\n  return c >= 4;\n};\n\nexport const singlePairsList = (startSet: number[]): number[][] => {\n  let toAdd = kombinatoricsJs.multiCombinations(startSet, 3, 0);\n  let singlePairs = [];\n  for (let i = 0; i < startSet.length; ++i) {\n    for (let j = 0; j < toAdd.length; ++j) {\n      if (!toAdd[j].includes(startSet[i])) {\n        singlePairs.push([startSet[i], startSet[i], ...toAdd[j]]);\n      }\n    }\n  }\n  return singlePairs;\n};\n\nexport const internalDoublePairsSort = (a: number[], b: number[]): number => {\n  if (a[0] < b[0]) return -1;\n  if (a[0] > b[0]) return 1;\n  if (a[1] < b[1]) return -1;\n  if (a[1] > b[1]) return 1;\n  return 0;\n};\n\nexport const sortedPairsToAdd = (startSet: number[]): number[][] => {\n  let _toAdd = kombinatoricsJs.multiCombinations(startSet, 2, 0);\n\n  _toAdd.forEach(pair => {\n    /* istanbul ignore next */\n    if (pair[0] < pair[1]) {\n      [pair[0], pair[1]] = [pair[1], pair[0]];\n    }\n  });\n  _toAdd.sort(internalDoublePairsSort);\n\n  return _toAdd;\n};\n\nexport const doublePairsList = (startSet: number[]): number[][] => {\n  let toAdd = sortedPairsToAdd(startSet);\n  let doublePairs = [];\n\n  for (let j = 0; j < toAdd.length; ++j) {\n    for (let i = 0; i < startSet.length; ++i) {\n      if (!toAdd[j].includes(startSet[i])) {\n        doublePairs.push([toAdd[j][0], toAdd[j][0], toAdd[j][1], toAdd[j][1], startSet[i]]);\n      }\n    }\n  }\n  return doublePairs;\n};\n\nexport const trisList = (startSet: number[]): number[][] => {\n  let toAdd = sortedPairsToAdd(startSet);\n  let tris = [];\n  for (let i = 0; i < startSet.length; ++i) {\n    for (let j = 0; j < toAdd.length; ++j) {\n      if (!toAdd[j].includes(startSet[i])) {\n        tris.push([startSet[i], startSet[i], startSet[i], ...toAdd[j]]);\n      }\n    }\n  }\n  return tris;\n};\n\nexport const fullHouseList = (startSet: number[]): number[][] => {\n  let fullHouses = kombinatoricsJs.crossProduct(startSet, 2).filter(p => p[0] !== p[1]);\n  return fullHouses.map((hand, idx) => {\n    return [hand[0], hand[0], hand[0], hand[1], hand[1]];\n  });\n};\n\nexport const quadsList = (startSet: number[]): number[][] => {\n  let quads = kombinatoricsJs.crossProduct(startSet, 2).filter(p => p[0] !== p[1]);\n  return quads.map(hand => {\n    return [hand[0], hand[0], hand[0], hand[0], hand[1]];\n  });\n};\n\nexport const checkStraight = (arr: number[]): boolean => {\n  let cond = true;\n  if (arr[4] === 12 && arr[0] === 0) {\n    return arr[1] === 1 && arr[2] === 2 && arr[3] === 3;\n  }\n  for (let i = 1; i < arr.length; ++i) {\n    cond = cond && arr[i - 1] + 1 === arr[i];\n  }\n  return cond;\n};\n\nexport const checkDoublePair = (hand: number[]): boolean => {\n  /* istanbul ignore next */\n  return (\n    (hand[0] === hand[1] && hand[2] === hand[3] && hand[3] !== hand[4] && hand[1] !== hand[4]) ||\n    (hand[0] === hand[1] && hand[3] === hand[4] && hand[3] !== hand[2] && hand[1] !== hand[2]) ||\n    (hand[1] === hand[2] && hand[3] === hand[4] && hand[3] !== hand[0] && hand[2] !== hand[0])\n  );\n};\n\nexport const removeStraights = (list: number[][]): number[][] => {\n  return list.filter((hand, idx) => {\n    return !checkStraight(hand);\n  });\n};\n\nexport const _rankOfHand = (hand: number[], rankHash: NumberMap) => {\n  return rankHash[getVectorSum(hand)];\n};\nexport const _rankOf5onX = (hand: number[], rankHash: NumberMap) => {\n  return Math.max(...kombinatoricsJs.combinations(hand, 5).map(h => rankHash[getVectorSum(h)]));\n};\n\nexport const fillRank5 = (h: number[], idx: number, rankingObject: hashRanking): hashRanking => {\n  let hash = getVectorSum(h.map(card => rankingObject.baseRankValues[card]));\n  rankingObject.HASHES[hash] = idx;\n  rankingObject.rankingInfos[idx] = hash;\n  return rankingObject;\n};\n\nexport const fillRank5PlusFlushes = (\n  h: number[],\n  idx: number,\n  rankingObject: hashRanking,\n  offset: number = CONSTANTS.FLUSHES_BASE_START + CONSTANTS.HIGH_CARDS_5_AMOUNT\n): hashRanking => {\n  let hash = getVectorSum(h.map(card => rankingObject.baseRankValues[card]));\n  rankingObject.HASHES[hash] = idx + offset;\n  rankingObject.rankingInfos[idx + offset] = hash;\n  return rankingObject;\n};\n\n\nexport const fillRankFlushes = (h: number[], rankingObject: hashRanking): hashRanking => {\n  let hash = getVectorSum(h.map(card => rankingObject.baseRankValues[card]));\n  let rank = rankingObject.HASHES[hash] + CONSTANTS.FLUSHES_BASE_START;\n  rankingObject.FLUSH_RANK_HASHES[hash] = rank;\n  rankingObject.rankingInfos[rank] = hash;\n\n  return rankingObject;\n};","import * as CONSTANTS from './constants';\nimport { getVectorSum, _rankOf5onX, fillRank5, fillRank5PlusFlushes, fillRankFlushes, checkStraight5on7 } from './routines';\nimport * as ROUTINES from './routines';\nimport * as kombinatoricsJs from 'kombinatoricsjs';\nimport { hashRanking, NumberMap } from './interfaces';\n\nexport const createRankOfFiveHashes = (): Readonly<hashRanking> => {\n  const hashRankingOfFive: hashRanking = {\n    HASHES: {},\n    FLUSH_CHECK_KEYS: CONSTANTS.flush5hHashCheck,\n    FLUSH_RANK_HASHES: {},\n    FLUSH_HASHES: {},\n    baseRankValues: CONSTANTS.ranksHashOn5,\n    baseSuitValues: CONSTANTS.suitsHash,\n    rankingInfos: new Array(7462)\n  };\n\n  //const handRankingInfos: (string | number)[] = hashRankingOfFive.rankingInfos;\n\n  const rankCards = CONSTANTS.rankCards;\n  const STRAIGHTS = CONSTANTS.STRAIGHTS;\n  const HIGH_CARDS_5_AMOUNT = CONSTANTS.HIGH_CARDS_5_AMOUNT;\n  let highCards = kombinatoricsJs.multiCombinations(rankCards, 5, 0);\n  const HIGH_CARDS = ROUTINES.removeStraights(highCards);\n  const SINGLE_PAIRS = ROUTINES.singlePairsList(rankCards);\n  const DOUBLE_PAIRS = ROUTINES.doublePairsList(rankCards);\n  const TRIPLES = ROUTINES.trisList(rankCards);\n  const FULLHOUSES = ROUTINES.fullHouseList(rankCards);\n  const QUADS = ROUTINES.quadsList(rankCards);\n\n  /*\n  let inc = 0;\n  console.log('high cards', (inc += HIGH_CARDS.length));\n  console.log('single pairs', (inc += SINGLE_PAIRS.length));\n  console.log('double pairs', (inc += DOUBLE_PAIRS.length));\n  console.log('triples', (inc += TRIPLES.length));\n  console.log('straights', (inc += STRAIGHTS.length));\n  \n  console.log('flushes', (inc += HIGH_CARDS_5_AMOUNT));\n  console.log('full houses', (inc += FULLHOUSES.length));\n  console.log('quads', (inc += QUADS.length));\n*/\n\n  let upToStraights = HIGH_CARDS.concat(SINGLE_PAIRS, DOUBLE_PAIRS, TRIPLES, STRAIGHTS);\n  upToStraights.forEach((h, idx) => {\n    fillRank5(h, idx, hashRankingOfFive);\n  });\n  let aboveStraights = FULLHOUSES.concat(QUADS);\n  aboveStraights.forEach((h, idx) => {\n    fillRank5PlusFlushes(h, idx, hashRankingOfFive);\n  });\n\n  /**FLUSHES and STRAIGHT FLUSHES */\n  HIGH_CARDS.forEach((h) => {\n    fillRankFlushes(h, hashRankingOfFive);\n  });\n\n  STRAIGHTS.forEach((h, idx) => {\n    let hash = getVectorSum(h.map(card => hashRankingOfFive.baseRankValues[card]));\n    let rank = idx + CONSTANTS.STRAIGHT_FLUSH_BASE_START;\n    hashRankingOfFive.FLUSH_RANK_HASHES[hash] = rank;\n    hashRankingOfFive.rankingInfos[rank] = hash;\n\n  });\n\n  return hashRankingOfFive;\n};\n\n//export const createRankOf5On6Hashes = () => { };\n\n/**@TODO add hand code to rankingInfo : [12,0,1,2,3,10,11] this is straight A2345KQ\n * or just retrieve category from rankValue the fine hightest card or components by statical exaustive hand analisys\n */\nexport const createRankOf5On7Hashes = (hashRankOfFive: hashRanking) => {\n  const hashRankingOfFiveOnSeven: hashRanking = {\n    HASHES: {},\n    FLUSH_CHECK_KEYS: {},\n    FLUSH_RANK_HASHES: {},\n    FLUSH_HASHES: {},\n    baseRankValues: CONSTANTS.ranksHashOn7,\n    baseSuitValues: CONSTANTS.suitsHash,\n    rankingInfos: hashRankOfFive.rankingInfos\n  };\n\n  let counter: number = 0;\n  const rankCards = CONSTANTS.rankCards;\n  const ranksHashOn7 = hashRankingOfFiveOnSeven.baseRankValues;\n  const suit7Hash = hashRankingOfFiveOnSeven.baseSuitValues;\n\n  kombinatoricsJs.multiCombinations(rankCards, 7, 3).forEach((hand: number[], i: number) => {\n    let h7 = hand.map(card => ranksHashOn7[card]);\n    let h5 = hand.map(card => hashRankOfFive.baseRankValues[card]);\n    let hash7: number = getVectorSum(h7);\n\n    hashRankingOfFiveOnSeven.HASHES[hash7] = _rankOf5onX(h5, hashRankOfFive.HASHES);\n\n  });\n\n  let fiveFlushes = kombinatoricsJs.combinations(rankCards, 5);\n  let sixFlushes = kombinatoricsJs.combinations(rankCards, 6);\n  let sevenFlushes = kombinatoricsJs.combinations(rankCards, 7);\n\n  fiveFlushes.concat(sixFlushes, sevenFlushes).forEach(h => {\n    let h5: number[] = h.map(c => hashRankOfFive.baseRankValues[c]);\n    let h7: number[] = h.map(c => hashRankingOfFiveOnSeven.baseRankValues[c]);\n    let hash7 = getVectorSum(h7);\n\n    /**@TODO simply draw rank from hashRankOfFive.FLUSH_RANK_HASHES*/\n    let rank = _rankOf5onX(h5, hashRankOfFive.HASHES);\n    if (checkStraight5on7(h)) {\n      // console.log(\"straight rank: \", rank);\n      rank += CONSTANTS.STRAIGHT_FLUSH_OFFSET;\n      // console.log(\"modified: \", rank);\n    } else {\n      rank += CONSTANTS.FLUSHES_BASE_START;\n    }\n    hashRankingOfFiveOnSeven.FLUSH_RANK_HASHES[hash7] = rank;\n  });\n\n  let fiveFlushHashes = [[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [8, 8, 8, 8, 8], [57, 57, 57, 57, 57]];\n  let sixFlushHashes: number[][] = [];\n  fiveFlushHashes.forEach((v, i) => {\n    sixFlushHashes.push(v.concat([0]), v.concat([1]), v.concat([8]), v.concat([57]));\n  });\n  let sevenFlushHashes: number[][] = [];\n\n  sixFlushHashes.forEach(v => {\n    sevenFlushHashes.push(v.concat([0]), v.concat([1]), v.concat([8]), v.concat([57]));\n  });\n\n\n  const FLUSH_CHECK_KEYS = hashRankingOfFiveOnSeven.FLUSH_CHECK_KEYS;\n\n  fiveFlushHashes.concat(sixFlushHashes, sevenFlushHashes).forEach(h => {\n    FLUSH_CHECK_KEYS[getVectorSum(h)] = h[0];\n  });\n\n\n  /*console.log(counter, sixFlushes, sevenFlushes, fiveFlushes);\n    console.log(cc, fiveFlushHashes, sixFlushHashes, sevenFlushHashes, hashRankingOfFiveOnSeven.FLUSH_CHECK_KEYS);\n    console.log(\"--------\", hashRankingOfFiveOnSeven);*/\n\n  return hashRankingOfFiveOnSeven;\n};\n","import * as kombinatoricsJs from 'kombinatoricsjs'\nimport { createRankOfFiveHashes, createRankOf5On7Hashes } from './hashesCreator'\nimport { fullCardsDeckHash_5, fullCardsDeckHash_7, FLUSH_MASK } from './constants';\n\n\n\nconst HASHES_OF_FIVE = createRankOfFiveHashes();\nconst FLUSH_CHECK_FIVE = HASHES_OF_FIVE.FLUSH_CHECK_KEYS;\nconst HASH_RANK_FIVE = HASHES_OF_FIVE.HASHES;\nconst FLUSH_RANK_FIVE = HASHES_OF_FIVE.FLUSH_RANK_HASHES;\n\n\nconst HASHES_OF_FIVE_ON_SEVEN = createRankOf5On7Hashes(HASHES_OF_FIVE);\nconst FLUSH_CHECK_SEVEN = HASHES_OF_FIVE_ON_SEVEN.FLUSH_CHECK_KEYS;\nconst HASH_RANK_SEVEN = HASHES_OF_FIVE_ON_SEVEN.HASHES;\nconst FLUSH_RANK_SEVEN = HASHES_OF_FIVE_ON_SEVEN.FLUSH_RANK_HASHES;\n\n/** @function handOfFiveEval \n * \n * @param {Number} c1...c5 cards hash from CONSTANTS.fullCardsDeckHash_5\n * @returns {Number} hand ranking\n*/\nexport const handOfFiveEval = (c1: number, c2: number, c3: number, c4: number, c5: number): number => {\n    let keySum: number = c1 + c2 + c3 + c4 + c5;\n    let rankKey: number = keySum >>> 9;\n    let flush_check_key: number = FLUSH_CHECK_FIVE[keySum & FLUSH_MASK];\n    if (flush_check_key >= 0) {\n        return FLUSH_RANK_FIVE[rankKey];\n    }\n\n    return HASH_RANK_FIVE[rankKey];\n}\n\n/** @function handOfFiveEvalIndexed \n * \n * @param {Number} c1...c5 cards index from [0...51]\n * @returns {Number} hand ranking\n*/\nexport const handOfFiveEvalIndexed = (c1: number, c2: number, c3: number, c4: number, c5: number): number => {\n    return handOfFiveEval(fullCardsDeckHash_5[c1], fullCardsDeckHash_5[c2], fullCardsDeckHash_5[c3], fullCardsDeckHash_5[c4], fullCardsDeckHash_5[c5]);\n}\n\n/** @function bfBestOfFiveOnX \n * \n * @param {Array:Number[]} array of 6 or more cards making up an hand \n * @returns {Number} hand ranking ( the best one on all combinations of input card in group of 5)\n*/\nexport const bfBestOfFiveOnX = (hand: number[]) => {\n    //@ts-ignore\n    return Math.max(...kombinatoricsJs.combinations(hand, 5).map(h => handOfFiveEval(...h)));\n};\n\n\n/** @function handOfSevenEval \n * \n * @param {Number} c1...c7 cards hash from CONSTANTS.fullCardsDeckHash_7\n * @returns {Number} hand ranking\n*/\nexport const handOfSevenEval = (c1: number, c2: number, c3: number, c4: number, c5: number, c6: number, c7: number): number => {\n    let keySum: number = c1 + c2 + c3 + c4 + c5 + c6 + c7;\n    let flush_check_key: number = FLUSH_CHECK_SEVEN[keySum & FLUSH_MASK];\n    if (flush_check_key >= 0) {\n        /**no full house or quads possible ---> can return flush_rank */\n\n        /*@ts-ignore\n        let flushRankKey: number = ((c1 & FLUSH_MASK) == flush_check_key) * c1 + ((c2 & FLUSH_MASK) == flush_check_key) * c2 +\n            //@ts-ignore\n            ((c3 & FLUSH_MASK) == flush_check_key) * c3 + ((c4 & FLUSH_MASK) == flush_check_key) * c4 +\n            //@ts-ignore\n            ((c5 & FLUSH_MASK) == flush_check_key) * c5 + ((c6 & FLUSH_MASK) == flush_check_key) * c6 + ((c7 & FLUSH_MASK) == flush_check_key) * c7;\n*/\n        //@ts-ignore\n        let flushRankKey = ((c1 & FLUSH_MASK) == flush_check_key) * c1;\n        //@ts-ignore\n        flushRankKey += ((c2 & FLUSH_MASK) == flush_check_key) * c2;\n        //@ts-ignore\n        flushRankKey += ((c3 & FLUSH_MASK) == flush_check_key) * c3;\n        //@ts-ignore\n        flushRankKey += ((c4 & FLUSH_MASK) == flush_check_key) * c4;\n        //@ts-ignore\n        flushRankKey += ((c5 & FLUSH_MASK) == flush_check_key) * c5;\n        //@ts-ignore\n        flushRankKey += ((c6 & FLUSH_MASK) == flush_check_key) * c6;\n        //@ts-ignore\n        flushRankKey += ((c7 & FLUSH_MASK) == flush_check_key) * c7;\n        //@ts-ignore\n        console.log(flushRankKey)\n        flushRankKey = flushRankKey >>> 9;\n        console.log(flushRankKey);\n        return FLUSH_RANK_SEVEN[flushRankKey];\n    } else {\n        console.log(keySum, keySum >>> 9);\n        return HASH_RANK_SEVEN[keySum >>> 9];\n    }\n}\n\n/** @function handOfSevenEvalIndexed \n * \n * @param {Number} c1...c5 cards index from [0...51]\n * @returns {Number} hand ranking\n*/\nexport const handOfSevenEvalIndexed = (c1: number, c2: number, c3: number, c4: number, c5: number, c6: number, c7: number): number => {\n    return handOfSevenEval(fullCardsDeckHash_7[c1], fullCardsDeckHash_7[c2], fullCardsDeckHash_7[c3], fullCardsDeckHash_7[c4], fullCardsDeckHash_7[c5], fullCardsDeckHash_7[c6], fullCardsDeckHash_7[c7]);\n}\n\n\n/**\n * \n *  \n */","import * as kombinatoricsJs from 'kombinatoricsjs'\nimport { createRankOfFiveHashes, createRankOf5On7Hashes } from './hashesCreator'\n\nimport { handOfSevenEvalIndexed } from './pokerEvaluators'\n\nconst HASHES_OF_FIVE = createRankOfFiveHashes()\n\nconst HASHES_OF_FIVE_ON_SEVEN = createRankOf5On7Hashes(HASHES_OF_FIVE)\n\n//console.log(\"MAIN:\", HASHES_OF_FIVE, HASHES_OF_FIVE_ON_SEVEN, handOfSevenEvalIndexed(12, 0, 1, 2, 3, 34, 23));\n\n\n\nexport default handOfSevenEvalIndexed;\n\n/**@TODO yahtzee ,poker dice,yacht,generala ,cheerio*/\n"],"names":["kombinatoricsJs.multiCombinations","kombinatoricsJs.crossProduct","kombinatoricsJs.combinations","CONSTANTS.FLUSHES_BASE_START","CONSTANTS.HIGH_CARDS_5_AMOUNT","CONSTANTS.flush5hHashCheck","CONSTANTS.ranksHashOn5","CONSTANTS.suitsHash","rankCards","CONSTANTS.rankCards","STRAIGHTS","CONSTANTS.STRAIGHTS","ROUTINES.removeStraights","ROUTINES.singlePairsList","ROUTINES.doublePairsList","ROUTINES.trisList","ROUTINES.fullHouseList","ROUTINES.quadsList","CONSTANTS.STRAIGHT_FLUSH_BASE_START","CONSTANTS.ranksHashOn7","ranksHashOn7","CONSTANTS.STRAIGHT_FLUSH_OFFSET","HASHES_OF_FIVE","HASHES_OF_FIVE_ON_SEVEN"],"mappings":"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"}