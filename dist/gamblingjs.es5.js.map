{"version":3,"file":"gamblingjs.es5.js","sources":["../node_modules/kombinatoricsjs/src/kombinatoricsjs.ts","../src/constants.ts","../src/routines.ts","../src/hashesCreator.ts","../src/gamblingjs.ts"],"sourcesContent":["/*TYPEDEFS?\ntype CallbackFunctionVariadicAnyReturn = (...args: any[]) => any;\ntype CallbackFunctionSomeVariadic =\n  (arg1: string, arg2: number, ...args: any[]) => void;\n*/\ntype genericListFn = <S>(list: S[], ...args: any[]) => S[][]\n\nexport const factorial = (n: number): number => {\n  let f: number = 1\n  for (let i: number = 1; i < n + 1; ++i) {\n    f *= i\n  }\n  return f\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\nexport const cNK = (n: number, k: number): number => {\n  let i: number,\n    coeff: number = 1\n  if (n < k) return 0\n  if (n === k) return 1\n  for (i = n - k + 1; i <= n; ++i) coeff *= i\n  for (i = 1; i <= k; ++i) coeff /= i\n  return coeff\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\nexport const pNK = (n: number, k: number): number => {\n  let f: number = 1\n  for (let i: number = n - k + 1; i < n + 1; ++i) {\n    f *= i\n  }\n  return f\n}\n\nexport const matrixToArray = <S>(matrix: S[][]) => {\n  let arr: S[] = [],\n    c: number,\n    r: number,\n    lc: number = matrix.length,\n    lr: number,\n    row: any[]\n  for (c = 0; c < lc; ++c) {\n    row = matrix[c]\n    lr = row.length\n    for (r = 0; r < lr; ++r) {\n      arr.push(row[r])\n    }\n  }\n  return arr\n}\n\ntype combinatoricsFn = (...args: number[]) => number\ninterface numbersCacheMap {\n  [index: number]: number\n}\n/*@TODO improve memoize to work with a wider range of functions (at least combinatorics with numeric inputs*/\nconst memoize: (fn: combinatoricsFn) => combinatoricsFn = (\n  fn: combinatoricsFn\n): combinatoricsFn => {\n  const cache: numbersCacheMap = {}\n  return (n: number, k: number = 0): number => {\n    if (n < 256 && k <= n) {\n      let key = (n << 9) | k\n      let out = cache[key]\n      return out ? out : (cache[key] = fn(n, k))\n    } else return fn(n, k)\n  }\n}\n\nexport const memoize_factorial = memoize(factorial)\nexport const memoize_pNK = memoize(pNK)\nexport const memoize_cNK = memoize(cNK)\n\n/**\n *BoxMuller method\n */\nconst rnd_bmt = (): number[] => {\n  let x: number = 0,\n    y: number = 0,\n    rds: number,\n    c: number\n\n  // Get two random numbers from -1 to 1.\n  // If the radius is zero or greater than 1, throw them out and pick two new ones\n  // Rejection sampling throws away about 20% of the pairs.\n  do {\n    x = Math.random() * 2 - 1\n    y = Math.random() * 2 - 1\n    rds = x * x + y * y\n  } while (rds == 0 || rds > 1)\n\n  // This magic is the Box-Muller Transform\n  c = Math.sqrt((-2 * Math.log(rds)) / rds)\n\n  // It always creates a pair of numbers. I'll return them in an array.\n  // This function is quite efficient so don't be afraid to throw one away if you don't need both.\n  return [x * c, y * c]\n}\n\n/**\n *Central Limit method\n */\nconst rnd_snd = () => {\n  return Math.random() * 2 - 1 + (Math.random() * 2 - 1) + (Math.random() * 2 - 1)\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\n\nexport const shuffle = (ar: any[]): void => {\n  let i: number,\n    r: number,\n    tmp: any,\n    l: number = ar.length\n  for (i = 0; i < l; ++i) {\n    r = ~~(Math.random() * l)\n    ;[ar[r], ar[i]] = [ar[i], ar[r]]\n  }\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\n\nexport const boxMullerShuffle = (ar: any[]): void => {\n  let i: number,\n    r1: number,\n    r2: number,\n    tmp: any,\n    l: number = ar.length\n  for (i = 0; i < l / 2; ++i) {\n    ;[r1, r2] = rnd_bmt()\n    r1 = ~~((r1 + 1) * l)\n    r2 = ~~((r2 + 1) * l)\n    ;[ar[r1], ar[r2]] = [ar[r2], ar[r1]]\n  }\n}\n/**\n *@method\n *\n *@param\n *@return\n */\nexport const normalRandom = {\n  BoxMuller: rnd_bmt,\n  CentralLimit: rnd_snd\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\n\nexport const indexArray = (l: number) => {\n  let arr: number[] = []\n\n  if (!isNaN(l) && l > 0) {\n    for (let i = 0; i < l; ++i) {\n      arr[i] = i\n    }\n  }\n\n  return arr\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\n/*iterator for generating combinations call it nextCombination*/\n\nexport const binomIncrement = (idxVector: number[], maxVal: number) => {\n  let l: number, i: number, j: number\n  j = 0\n  l = idxVector.length\n  if (maxVal < l) return false //doesn't work if n<k\n  if (idxVector[l - 1] < maxVal) idxVector[l - 1]++\n  else {\n    //find value to increment\n    for (i = l - 1; i >= 0; i -= 1) {\n      if (idxVector[i] < maxVal - j) break\n      else j += 1\n    }\n    if (i < 0) return 0\n    //increment\n    idxVector[i] += 1\n    i += 1\n    //adjust successive values\n    for (i; i < l; i += 1) {\n      idxVector[i] = idxVector[i - 1] + 1\n    }\n  }\n\n  return 1\n}\n\nexport const combinationsIterator = (list: any[], k: number) => {\n  let n: number = list.length\n\n  var _index: number[] = indexArray(k)\n  var beginIndex: number[] = indexArray(k)\n\n  var _collection = list.slice()\n  var combination = new Array(k)\n  var count = 0\n\n  function setCombination() {\n    for (let i = 0; i < k; ++i) {\n      combination[i] = _collection[_index[i]]\n    }\n  }\n\n  setCombination()\n\n  var iterator = {\n    next: function() {\n      if (binomIncrement(_index, n - 1)) {\n        count++\n        setCombination()\n        return 1\n      } else {\n        return 0\n      }\n    },\n    getComb: function(cnt: number = 0) {\n      if (cnt > 0) {\n        var c = cnt - count\n        var step\n        while (c > 0 && (step = binomIncrement(_index, n - 1))) {\n          c--\n          count++\n        }\n\n        if (!step) return 0\n        setCombination()\n      }\n\n      return combination.slice()\n    },\n    getIndex: function() {\n      return _index\n    },\n    getCount: function() {\n      return count\n    },\n    reset: function() {\n      _index = indexArray(k)\n      setCombination()\n      count = 0\n    }\n  }\n  return iterator\n}\n\nexport const pick = (\n  n: number,\n  got: any[],\n  pos: number,\n  from: any[],\n  limit: number,\n  cntLimit: number,\n  callBack: Function\n): number => {\n  let cnt: number = 0,\n    limitCount: number = cntLimit\n  if (got.length == n) {\n    callBack(got)\n    return 1\n  }\n\n  for (let i: number = pos; i < from.length; i++) {\n    got.push(from[i])\n\n    if (limitCount === limit) {\n      cnt += pick(n, got, i + 1, from, limit, 0, callBack)\n      limitCount = 0\n    } else {\n      let next: number =\n        limitCount === 0 || got[got.length - 1] === got[got.length - 2]\n          ? limitCount + 1\n          : limitCount\n\n      cnt += pick(n, got, i, from, limit, next, callBack)\n    }\n\n    got.pop()\n  }\n\n  return cnt\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\n\nexport const combinations: genericListFn = (_collection: any[], k: number): any[][] => {\n  if (_collection.length < k || k < 1) {\n    return [_collection]\n  }\n\n  let comb: any[][] = []\n\n  pick(k, [], 0, _collection, 0, 0, (c: any[]) => {\n    comb.push(c.slice())\n  })\n\n  return comb\n}\n\nexport const pickMulti = (\n  n: number,\n  got: any[],\n  pos: number,\n  from: any[],\n  limit: number[],\n  limitCount: number[],\n  callBack: Function\n) => {\n  /*let limitCount = limitCnt.slice();*/\n\n  if (got.length == n) {\n    callBack(got)\n  }\n\n  for (let i: number = pos; i < from.length; i++) {\n    got.push(from[i])\n\n    if (limitCount[i] === limit[i]) {\n      limitCount[i] = 0\n      pickMulti(n, got, i + 1, from, limit, limitCount, callBack)\n    } else {\n      if (pos === 0 || limitCount[i] === 0 || got[got.length - 1] === got[got.length - 2]) {\n        limitCount[i]++\n      }\n      pickMulti(n, got, i, from, limit, limitCount, callBack)\n    }\n\n    got.pop()\n  }\n\n  return 1\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\nexport const multiCombinations = (_collection: any[], n: number, repetition: number): any[][] => {\n  let multiComb: any[][] = []\n\n  pick(n, [], 0, _collection, repetition, 0, (c: any[]) => {\n    multiComb.push(c.slice())\n  })\n\n  return multiComb\n}\n\n/**\n *@method\n *\n *@param\n *@return\n */\nexport const combinationsMultiSets = (_collection: any[], n: number): any[][] => {\n  var l = _collection.length,\n    limitCount = [0],\n    limits = [0],\n    list = [_collection[0]],\n    j = 0\n\n  for (var i = 1; i < l; ++i) {\n    if (_collection[i] === _collection[i - 1]) {\n      limits[j]++\n    } else {\n      j++\n      list[j] = _collection[i]\n      limitCount.push(0)\n      limits.push(0)\n    }\n  }\n  var multiComb: any[][] = []\n\n  pickMulti(n, [], 0, list, limits, limitCount, (c: any[]) => {\n    multiComb.push(c.slice())\n  })\n\n  return multiComb\n}\n\n/*@TODO use destructuring*/\nfunction swap(items: any[], i: number, j: number) {\n  var temp = items[i]\n  items[i] = items[j]\n  items[j] = temp\n}\n\n/*standard callback slices items and returns it*/\nexport const heapPermute = (n: number, items: any[], callBack: Function) => {\n  if (n === 1) {\n    callBack(items, n)\n  } else {\n    for (var i = 0; i < n; ++i) {\n      heapPermute(n - 1, items, callBack)\n      if (n % 2 === 1) {\n        swap(items, 0, n - 1)\n      } else {\n        swap(items, i, n - 1)\n      }\n    }\n  }\n}\n\nexport const permutations = (list: any[]): any[][] => {\n  var p = indexArray(list.length)\n  var i = 1,\n    j\n  var n = list.length\n  var perms: any[][] = [list.slice()]\n  while (i < n) {\n    p[i]--\n    j = i % 2 ? p[i] : 0\n\n    swap(list, i, j)\n    perms.push(list.slice())\n\n    i = 1\n    while (p[i] === 0) {\n      p[i] = i\n      i++\n    }\n  }\n\n  return perms\n}\n\nexport const permutationsNK = (list: any[], k: number): any[][] => {\n  let permsNK: any[][] = []\n  let _combsNK = combinations(list, k)\n  for (let i = 0; i < _combsNK.length; ++i) {\n    permsNK.push(permutations(_combsNK[i]))\n  }\n  return matrixToArray(permsNK)\n}\n\n/*not exposed*/\nconst nextPermutation = (list: any[], index: number[], callBack: Function) => {\n  let n = list.length\n  let i = 1,\n    j\n  while (index[i] === 0) {\n    index[i] = i\n    i++\n  }\n  if (i < n) {\n    index[i]--\n    j = i % 2 ? index[i] : 0\n\n    swap(list, i, j)\n    return callBack(list)\n  } else return 0\n}\n\n/*not exposed*/\nconst nextPermutationLexi = (list: any[]) => {\n  var n = list.length\n  var i = n - 1\n  while (i > 0 && list[i - 1] >= list[i]) {\n    i--\n  }\n  if (i <= 0) return 0\n  var j = n - 1\n\n  while (list[j] <= list[i - 1]) {\n    j--\n  }\n  swap(list, i - 1, j)\n  /*then reverse items from i+1 to j*/\n  j = n - 1\n  while (i < j) {\n    swap(list, i, j)\n    i++\n    j--\n  }\n\n  return 1\n}\n\nconst makeIndex = (list: any[]) => {\n  let n: number = list.length\n  let index: number[] = indexArray(n)\n  let j = 0,\n    k = 0\n\n  for (var i = 1; i < n; ++i) {\n    if (list[i] === list[i - 1]) {\n      index[i] = index[i - 1] = j\n    } else {\n      j++\n      index[i] = j\n    }\n  }\n  return index\n}\n\nexport const permutationsIterator = (list: any[]) => {\n  var n = list.length\n\n  var _index = indexArray(n)\n  var beginIndex = indexArray(n)\n\n  var _collection = list.slice()\n  var permutation = list.slice()\n  var count = 0\n\n  function setPermutation() {\n    for (var i = 0; i < n; ++i) {\n      permutation[i] = _collection[_index[i]]\n    }\n  }\n\n  var iterator = {\n    next: function() {\n      if (nextPermutationLexi(_index)) {\n        count++\n        setPermutation()\n        return 1\n      } else {\n        return 0\n      }\n    },\n    getPerm: function(cnt: number = 0) {\n      if (cnt > 0) {\n        var c = cnt - count\n        var step\n        while (c > 0 && (step = nextPermutationLexi(_index))) {\n          c--\n          count++\n        }\n\n        if (!step) return 0\n        setPermutation()\n      }\n\n      return permutation.slice()\n    },\n    getIndex: function() {\n      return _index\n    },\n    getCount: function() {\n      return count\n    },\n    reset: function() {\n      _index = indexArray(n)\n      setPermutation()\n      count = 0\n    }\n  }\n  return iterator\n}\n\nexport const permutationsMultiSets = (list: any[]): any[][] => {\n  var n = list.length,\n    index = indexArray(n)\n  var data = [list[0]],\n    perm: any[][] = [],\n    j = 0,\n    k = 0,\n    permutationMultiSet: any[][] = [list.slice()]\n  /*initializaition*/\n  for (var i = 1; i < n; ++i) {\n    if (list[i] === list[i - 1]) {\n      index[i] = index[i - 1] = j\n    } else {\n      j++\n      index[i] = j\n      data.push(list[i])\n    }\n  }\n\n  while (nextPermutationLexi(index)) {\n    for (k = 0; k < n; ++k) {\n      perm[k] = data[index[k]]\n    }\n\n    permutationMultiSet.push(perm.slice())\n  }\n\n  return permutationMultiSet\n}\n\nexport const permutationsNKMultiSets = (list: any[], k: number): any[][] => {\n  var permsNK: any[][] = []\n  var _combsNK = combinationsMultiSets(list, k)\n  for (var i = 0; i < _combsNK.length; ++i) {\n    permsNK.push(permutationsMultiSets(_combsNK[i]))\n  }\n  return matrixToArray(permsNK)\n}\n\nexport const crossProduct = (list: any[], k: number): any[][] => {\n  if (k < 1) return list\n  let crossProdList: any[][] = new Array(Math.pow(list.length, k))\n  let l = crossProdList.length\n  let ln = list.length\n\n  for (let i = 0; i < l; ++i) {\n    let tmpList: any[][] = []\n    let number = i\n    for (let j = k - 1; j >= 0; --j) {\n      let digit = number % ln\n      number = Math.floor(number / ln)\n      tmpList[j] = list[digit]\n    }\n    crossProdList[i] = tmpList\n  }\n  return crossProdList\n}\n\nexport const version = 1.0\n","/**\n * think of using typed array for performance reasons as these data is accessed very often\n * 8bit or 16bits arrays can be used\n */\nimport { NumberMap } from './interfaces'\nimport { NumberToStringMap } from './interfaces'\n\nexport const flushHash: number[] = [1, 2, 4, 8, 16, 32, 64, 128, 255, 508, 1012, 2016, 4016] // 13 one for each rank\n\nexport const suitsHash: number[] = [0, 57, 1, 8] // 4 one for each suit\n\n/**check for !==undefined */\nexport const flush5hHashCheck: Readonly<NumberMap> = {\n  '0': 0,\n  '5': 1,\n  '40': 8,\n  '285': 57\n}\n\nexport const flush7HashCheck: Readonly<NumberMap> = {\n  '0': 0,\n  '1': 0,\n  '2': 0,\n  '5': 1,\n  '6': 1,\n  '7': 1,\n  '8': 0,\n  '9': 0,\n  '13': 1,\n  '14': 1,\n  '16': 0,\n  '21': 1,\n  '40': 8,\n  '41': 8,\n  '42': 8,\n  '48': 8,\n  '49': 8,\n  '56': 8,\n  '57': 0,\n  '58': 0,\n  '62': 1,\n  '63': 1,\n  '65': 0,\n  '70': 1,\n  '97': 8,\n  '98': 8,\n  '105': 8,\n  '114': 0,\n  '119': 1,\n  '154': 8,\n  '285': 57,\n  '286': 57,\n  '287': 57,\n  '293': 57,\n  '294': 57,\n  '301': 57,\n  '342': 57,\n  '343': 57,\n  '350': 57,\n  '399': 57\n}\n\nexport const ranksHashOn7: number[] = []; // 13 one for each rank\n\nranksHashOn7[0] = 0\nranksHashOn7[1] = 1\nranksHashOn7[2] = 5\nranksHashOn7[3] = 22\nranksHashOn7[4] = 98\nranksHashOn7[5] = 453\nranksHashOn7[6] = 2031\nranksHashOn7[7] = 8698\nranksHashOn7[8] = 22854\nranksHashOn7[9] = 83661\nranksHashOn7[10] = 262349\nranksHashOn7[11] = 636345\nranksHashOn7[12] = 1479181\n\nexport const ranksHashOn5: number[] = [] // one for each rank\n\nranksHashOn5[0] = 0 // 2\nranksHashOn5[1] = 1 // 3\nranksHashOn5[2] = 5 // 4\nranksHashOn5[3] = 22 // 5\nranksHashOn5[4] = 94 // 6\nranksHashOn5[5] = 312 // 7\nranksHashOn5[6] = 992 // 8\nranksHashOn5[7] = 2422 // 9\nranksHashOn5[8] = 5624 // 10\nranksHashOn5[9] = 12522 // J\nranksHashOn5[10] = 19998 // Q\nranksHashOn5[11] = 43258 // K\nranksHashOn5[12] = 79415 // A\n\n/* \narrays initialization\n*/\nexport const deckOfRanks_5: number[] = new Array(52);\nexport const deckOfRanks_7: number[] = new Array(52);\nexport const deckOfFlushes: number[] = new Array(52);\nexport const deckOfSuits: number[] = new Array(52);\n\nexport const fullCardsDeckHash_5: number[] = new Array(52);\nexport const fullCardsDeckHash_7: number[] = new Array(52);\n\nexport const cardHashToDescription_5: NumberToStringMap = {};\nexport const cardHashToDescription_7: NumberToStringMap = {};\n\nfor (let i: number = 0; i < 52; i++) {\n  deckOfRanks_5[i] = ranksHashOn5[i % 13];\n  deckOfRanks_7[i] = ranksHashOn5[i % 13];\n  deckOfFlushes[i] = flushHash[i % 13];\n  deckOfSuits[i] = suitsHash[~~(i / 13)];\n\n  let card5 = fullCardsDeckHash_5[i] = (deckOfRanks_5[i] << 9) + deckOfSuits[i];\n  let card7 = fullCardsDeckHash_7[i] = (deckOfRanks_7[i] << 9) + deckOfSuits[i];\n  cardHashToDescription_5[card5] = i;/**any value used to display the card to the user---make it configurable!!!!! */\n  cardHashToDescription_7[card7] = i;\n}\n\nexport const STRAIGHTS: number[][] = [\n  [12, 0, 1, 2, 3],\n  [0, 1, 2, 3, 4],\n  [1, 2, 3, 4, 5],\n  [2, 3, 4, 5, 6],\n  [3, 4, 5, 6, 7],\n  [4, 5, 6, 7, 8],\n  [5, 6, 7, 8, 9],\n  [6, 7, 8, 9, 10],\n  [7, 8, 9, 10, 11],\n  [8, 9, 10, 11, 12]\n]\n\nexport const rankCards: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nexport const HIGH_CARDS_5_AMOUNT = 1277;\nexport const FLUSHES_BASE_START = 5863;\n\n\nexport const handsRankingDelimiter_5cards: number[] = [1277, 4137, 4995, 5853, 5863, 7140, 7296, 7452, 7462];\n/**\n * fill with these:\n * https://en.wikipedia.org/wiki/Poker_probability\n */\nexport const distinctHandsQuantityByGroup = {\n  HIGH_CARD: 1277,\n  ONE_PAIR: 2860,\n  TWO_PAIR: 858,\n  THREE_OF_A_KIND: 858,\n  STRAIGHT: 10,\n  FLUSH: 1277,\n  FULL_HOUSE: 156,\n  FOUR_OF_A_KIND: 156,\n  STRAIGHT_FLUSH: 10\n}\n/**\n * @TODO make function to work with non full decks. ex. deck of 40 cards\n *\n * */\n\n/**\n * @TODO prepare similar stuff for dice suited poker\n *\n * */\n","import * as kombinatoricsJs from 'kombinatoricsjs'\n\nexport const atLeast5Eq = (list: (number | string)[][]): (number | string)[][] => {\n  return list.filter(v => {\n    let l = v.length\n    let c = 0,\n      i = 1\n    while (i < l) {\n      if (v[i] === v[i - 1]) {\n        c++\n      } else {\n        c = 0\n      }\n      i++\n      if (c === 4) break\n    }\n    return c >= 4\n  })\n}\nexport const getVectorSum = (v: number[]): number => {\n  let l: number = v.length\n  let s: number = 0\n  for (let i: number = 0; i < l; i++) {\n    s += v[i]\n  }\n  return s\n}\n\nexport const getFlushSuit7 = (v: number[]): number => {\n  let t: number = v[0]\n  let c: number = 0\n  let i: number = 1\n  while (i < 7) {\n    if (t !== v[i]) {\n      t = v[i]\n      c = 0\n    } else {\n      c++\n    }\n    i++\n    if (c === 4) break\n  }\n  return t\n}\n\nexport const checkStraight5on7 = (arr: number[]): boolean => {\n  let c: number = 0\n  if (arr[6] === 12 && arr[0] === 0 && arr.includes(1) && arr.includes(2) && arr.includes(3)) {\n    return true\n  }\n  for (let i = 1; i < arr.length; ++i) {\n    if (arr[i - 1] + 1 === arr[i]) {\n      c++\n    } else {\n      c = 0\n    }\n    if (c === 4) break\n  }\n  return c >= 4\n}\n\nexport const singlePairsList = (startSet: number[]): number[][] => {\n  let toAdd = kombinatoricsJs.multiCombinations(startSet, 3, 0)\n  let singlePairs = []\n  for (let i = 0; i < startSet.length; ++i) {\n    for (let j = 0; j < toAdd.length; ++j) {\n      if (!toAdd[j].includes(startSet[i])) {\n        singlePairs.push([startSet[i], startSet[i], ...toAdd[j]])\n      }\n    }\n  }\n  return singlePairs\n}\n\nexport const sortedPairsToAdd = (startSet: number[]): number[][] => {\n  let _toAdd = kombinatoricsJs.multiCombinations(startSet, 2, 0)\n\n  _toAdd.forEach((pair, idx) => {\n    if (pair[0] < pair[1]) {\n      let tmp = pair[0]\n      pair[0] = pair[1]\n      pair[1] = tmp\n    }\n  })\n  _toAdd.sort((a, b) => {\n    if (a[0] < b[0]) return -1\n    if (a[0] > b[0]) return 1\n    if (a[1] < b[1]) return -1\n    if (a[1] > b[1]) return 1\n    return 0\n  })\n\n  return _toAdd\n}\n\nexport const doublePairsList = (startSet: number[]): number[][] => {\n  let toAdd = sortedPairsToAdd(startSet)\n  let doublePairs = []\n\n  for (let j = 0; j < toAdd.length; ++j) {\n    for (let i = 0; i < startSet.length; ++i) {\n      if (!toAdd[j].includes(startSet[i])) {\n        doublePairs.push([toAdd[j][0], toAdd[j][0], toAdd[j][1], toAdd[j][1], startSet[i]])\n      }\n    }\n  }\n  return doublePairs\n}\n\nexport const trisList = (startSet: number[]): number[][] => {\n  let toAdd = sortedPairsToAdd(startSet)\n  let tris = []\n  for (let i = 0; i < startSet.length; ++i) {\n    for (let j = 0; j < toAdd.length; ++j) {\n      if (!toAdd[j].includes(startSet[i])) {\n        tris.push([startSet[i], startSet[i], startSet[i], ...toAdd[j]])\n      }\n    }\n  }\n  return tris\n}\n\nexport const fullHouseList = (startSet: number[]): number[][] => {\n  let fullHouses = kombinatoricsJs.crossProduct(startSet, 2).filter(p => p[0] !== p[1])\n  return fullHouses.map((hand, idx) => {\n    return [hand[0], hand[0], hand[0], hand[1], hand[1]]\n  })\n}\n\nexport const quadsList = (startSet: number[]): number[][] => {\n  let quads = kombinatoricsJs.crossProduct(startSet, 2).filter(p => p[0] !== p[1])\n  return quads.map((hand, idx) => {\n    return [hand[0], hand[0], hand[0], hand[0], hand[1]]\n  })\n}\n\nexport const checkStraight = (arr: number[]): boolean => {\n  let cond = true\n  if (arr[4] === 12 && arr[0] === 0) {\n    return arr[1] === 1 && arr[2] === 2 && arr[3] === 3\n  }\n  for (let i = 1; i < arr.length; ++i) {\n    cond = cond && arr[i - 1] + 1 === arr[i]\n  }\n  return cond\n}\n\nexport const checkDoublePair = (hand: number[]): boolean => {\n  return (\n    (hand[0] === hand[1] && hand[2] === hand[3]) ||\n    (hand[0] === hand[1] && hand[3] === hand[4]) ||\n    (hand[1] === hand[2] && hand[3] === hand[4])\n  )\n}\n\nexport const removeStraights = (list: number[][]): number[][] => {\n  return list.filter((hand, idx) => {\n    return !checkStraight(hand)\n  })\n}\n","import * as CONSTANTS from './constants'\nimport { getVectorSum } from './routines'\nimport * as ROUTINES from './routines'\nimport * as kombinatoricsJs from 'kombinatoricsjs'\nimport { hashRanking } from './interfaces'\nimport { NumberMap } from './interfaces'\n\nconst fillRank5 = (h: number[], idx: number, rankingObject: hashRanking): hashRanking => {\n    let hash = getVectorSum(h.map(card => rankingObject.baseRankValues[card]))\n    rankingObject.HASHES[hash] = idx\n    rankingObject.rankingInfos.push(idx)\n    return rankingObject\n}\n\nconst fillRank5PlusFlushes = (\n    h: number[],\n    idx: number,\n    rankingObject: hashRanking,\n    offset: number = CONSTANTS.FLUSHES_BASE_START + CONSTANTS.HIGH_CARDS_5_AMOUNT\n): hashRanking => {\n    let hash = getVectorSum(h.map(card => rankingObject.baseRankValues[card]))\n    rankingObject.HASHES[hash] = idx + offset\n    rankingObject.rankingInfos.push(idx + offset)\n    return rankingObject\n}\n\nexport const createRankOfFiveHashes = (): Readonly<hashRanking> => {\n    const hashRankingOfFive: hashRanking = {\n        HASHES: {},\n        FLUSH_CHECK_KEYS: CONSTANTS.flush5hHashCheck,\n        baseRankValues: CONSTANTS.ranksHashOn5,\n        baseSuitValues: CONSTANTS.suitsHash,\n        rankingInfos: []\n    }\n\n    //const handRankingInfos: (string | number)[] = hashRankingOfFive.rankingInfos;\n\n    const rankCards = CONSTANTS.rankCards\n    const STRAIGHTS = CONSTANTS.STRAIGHTS\n    const HIGH_CARDS_5_AMOUNT = CONSTANTS.HIGH_CARDS_5_AMOUNT\n    let highCards = kombinatoricsJs.multiCombinations(rankCards, 5, 0)\n    const HIGH_CARDS = ROUTINES.removeStraights(highCards)\n    const SINGLE_PAIRS = ROUTINES.singlePairsList(rankCards)\n    const DOUBLE_PAIRS = ROUTINES.doublePairsList(rankCards)\n    const TRIPLES = ROUTINES.trisList(rankCards)\n    const FULLHOUSES = ROUTINES.fullHouseList(rankCards)\n    const QUADS = ROUTINES.quadsList(rankCards)\n\n    let inc = 0\n    console.log('high cards', (inc += HIGH_CARDS.length))\n    console.log('single pairs', (inc += SINGLE_PAIRS.length))\n    console.log('double pairs', (inc += DOUBLE_PAIRS.length))\n    console.log('triples', (inc += TRIPLES.length))\n    console.log('straights', (inc += STRAIGHTS.length))\n    //flushes as many as highcards\n    console.log('flushes', (inc += HIGH_CARDS_5_AMOUNT))\n    console.log('full houses', (inc += FULLHOUSES.length))\n    console.log('quads', (inc += QUADS.length))\n\n    let upToStraights = HIGH_CARDS.concat(SINGLE_PAIRS, DOUBLE_PAIRS, TRIPLES, STRAIGHTS);\n    upToStraights.forEach((h, idx) => {\n        return fillRank5(h, idx, hashRankingOfFive);\n    });\n    let aboveStraights = HIGH_CARDS.concat(FULLHOUSES, QUADS, STRAIGHTS);\n    aboveStraights.forEach((h, idx) => {\n        return fillRank5PlusFlushes(h, idx, hashRankingOfFive);\n    });\n\n    //console.log(upToStraights, aboveStraights);\n    /**\n     * @TODO\n     * add strightflushes\n     */\n    /**\n     * in evaluator of 5 cards always get the rank then add the flush value\n     */\n    return hashRankingOfFive\n}\n\nconst _rankOfHand = (hand: number[], rankHash: NumberMap) => {\n    return rankHash[getVectorSum(hand)]\n}\nconst _rankOf5onX = (hand: number[], rankHash: NumberMap) => {\n    return Math.max(...kombinatoricsJs.combinations(hand, 5).map(h => rankHash[getVectorSum(h)]))\n}\n\nexport const createRankOf5On6Hashes = () => { };\n\nexport const createRankOf5On7Hashes = (hashRankOfFive: hashRanking) => {\n    const hashRankingOfFiveOnSeven: hashRanking = {\n        HASHES: {},\n        FLUSH_CHECK_KEYS: {},\n        FLUSH_RANK_HASHES: {},\n        baseRankValues: CONSTANTS.ranksHashOn7,\n        baseSuitValues: CONSTANTS.suitsHash,\n        rankingInfos: []\n    }\n    let counter: number = 0;\n    const rankCards = CONSTANTS.rankCards;\n    const ranksHashOn7 = hashRankingOfFiveOnSeven.baseRankValues;\n    const suit7Hash = hashRankingOfFiveOnSeven.baseSuitValues;\n\n    kombinatoricsJs\n        .multiCombinations(rankCards, 7, 3)\n        .forEach((hand: number[], i: number) => {\n            let h7 = hand.map(card => ranksHashOn7[card]);\n            let h5 = hand.map(card => hashRankOfFive.baseRankValues[card]);\n            let hash7: number = getVectorSum(h7);\n            hashRankingOfFiveOnSeven.HASHES[hash7] = _rankOf5onX(h5, hashRankOfFive.HASHES);\n\n            counter++;\n        })\n    console.log(\"7rankhands:\", counter);\n    /**\n     * 5 same suits\n     * 6 same suits\n     * 7 same suits\n     * the use best5On6 best5On7\n     */\n\n    const FLUSH_RANK_HASHES = hashRankingOfFiveOnSeven.FLUSH_RANK_HASHES || {};\n\n    let fiveFlushes = kombinatoricsJs\n        .combinations(rankCards, 5);\n    let sixFlushes = kombinatoricsJs\n        .combinations(rankCards, 6);\n    let sevenFlushes = kombinatoricsJs\n        .combinations(rankCards, 7);\n\n    fiveFlushes.concat(sixFlushes, sevenFlushes).forEach((h) => {\n        let h5: number[] = h.map(c => hashRankOfFive.baseRankValues[c]);\n        let h7: number[] = h.map(c => hashRankingOfFiveOnSeven.baseRankValues[c]);\n        let hash7 = getVectorSum(h7);\n\n        FLUSH_RANK_HASHES[hash7] = _rankOf5onX(h5, hashRankOfFive.HASHES) + CONSTANTS.FLUSHES_BASE_START;\n    });\n\n    let fiveFlushHashes = [[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [8, 8, 8, 8, 8], [57, 57, 57, 57, 57]];\n    let sixFlushHashes: number[][] = [];\n    fiveFlushHashes.forEach((v, i) => {\n        sixFlushHashes.push(v.concat([0]), v.concat([1]), v.concat([8]), v.concat([57]));\n    });\n    let sevenFlushHashes: number[][] = [];\n\n    sixFlushHashes.forEach((v) => {\n        sevenFlushHashes.push(v.concat([0]), v.concat([1]), v.concat([8]), v.concat([57]));\n    });\n\n    let cc = 0;\n    const FLUSH_CHECK_KEYS = hashRankingOfFiveOnSeven.FLUSH_CHECK_KEYS;\n    /**for testing count all to be 84 and equally distributed */\n    fiveFlushHashes.concat(sixFlushHashes, sevenFlushHashes).forEach((h) => {\n        FLUSH_CHECK_KEYS[getVectorSum(h)] = h[0];\n        cc++;\n    });\n\n    /*console.log(counter, sixFlushes, sevenFlushes, fiveFlushes);\n    console.log(cc, fiveFlushHashes, sixFlushHashes, sevenFlushHashes, hashRankingOfFiveOnSeven.FLUSH_CHECK_KEYS);\n    console.log(\"--------\", hashRankingOfFiveOnSeven);*/\n\n    return hashRankingOfFiveOnSeven;\n}\n","import * as kombinatoricsJs from 'kombinatoricsjs'\nimport { createRankOfFiveHashes } from './hashesCreator'\nimport { createRankOf5On7Hashes } from './hashesCreator'\n\nconst HASHES_OF_FIVE = createRankOfFiveHashes();\n\nconst HASHES_OF_FIVE_ON_SEVEN = createRankOf5On7Hashes(HASHES_OF_FIVE);\n\n//console.log(\"MAIN:\", HASHES_OF_FIVE, HASHES_OF_FIVE_ON_SEVEN);\n/*\nlet count = 0;\nfor (let h in HASHES_OF_FIVE_ON_SEVEN.HASHES) {\n  count++;\n  if (isNaN(HASHES_OF_FIVE_ON_SEVEN.HASHES[h])) {\n    console.log(h, count);\n  }\n}\n*/\nexport const fac = (n: number) => {\n  return kombinatoricsJs.factorial(n);\n}\n\n\n/**@TODO yahtzee ,poker dice,yacht,generala ,cheerio*/"],"names":["kombinatoricsJs.multiCombinations","kombinatoricsJs.crossProduct","CONSTANTS.FLUSHES_BASE_START","CONSTANTS.HIGH_CARDS_5_AMOUNT","CONSTANTS.flush5hHashCheck","CONSTANTS.ranksHashOn5","CONSTANTS.suitsHash","rankCards","CONSTANTS.rankCards","STRAIGHTS","CONSTANTS.STRAIGHTS","HIGH_CARDS_5_AMOUNT","ROUTINES.removeStraights","ROUTINES.singlePairsList","ROUTINES.doublePairsList","ROUTINES.trisList","ROUTINES.fullHouseList","ROUTINES.quadsList","kombinatoricsJs.combinations","CONSTANTS.ranksHashOn7","ranksHashOn7","kombinatoricsJs\r\n        .multiCombinations","kombinatoricsJs\r\n        .combinations","kombinatoricsJs.factorial"],"mappings":"MAOa,SAAS,GAAG,CAAC,CAAS;IACjC,IAAI,CAAC,GAAW,CAAC,CAAA;IACjB,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;QACtC,CAAC,IAAI,CAAC,CAAA;KACP;IACD,OAAO,CAAC,CAAA;CACT,CAAA;AAuQD,MAAa,IAAI,GAAG,CAClB,CAAS,EACT,GAAU,EACV,GAAW,EACX,IAAW,EACX,KAAa,EACb,QAAgB,EAChB,QAAkB;IAElB,IAAI,GAAG,GAAW,CAAC,EACjB,UAAU,GAAW,QAAQ,CAAA;IAC/B,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,EAAE;QACnB,QAAQ,CAAC,GAAG,CAAC,CAAA;QACb,OAAO,CAAC,CAAA;KACT;IAED,KAAK,IAAI,CAAC,GAAW,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC9C,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;QAEjB,IAAI,UAAU,KAAK,KAAK,EAAE;YACxB,GAAG,IAAI,IAAI,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAA;YACpD,UAAU,GAAG,CAAC,CAAA;SACf;aAAM;YACL,IAAI,IAAI,GACN,UAAU,KAAK,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;kBAC3D,UAAU,GAAG,CAAC;kBACd,UAAU,CAAA;YAEhB,GAAG,IAAI,IAAI,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAA;SACpD;QAED,GAAG,CAAC,GAAG,EAAE,CAAA;KACV;IAED,OAAO,GAAG,CAAA;CACX,CAAA;;;;;;;AASD,MAAa,YAAY,GAAkB,CAAC,WAAkB,EAAE,CAAS;IACvE,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QACnC,OAAO,CAAC,WAAW,CAAC,CAAA;KACrB;IAED,IAAI,IAAI,GAAY,EAAE,CAAA;IAEtB,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAQ;QACzC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAA;KACrB,CAAC,CAAA;IAEF,OAAO,IAAI,CAAA;CACZ,CAAA;AAED;;;;;;AAwCA,MAAa,iBAAiB,GAAG,CAAC,WAAkB,EAAE,CAAS,EAAE,UAAkB;IACjF,IAAI,SAAS,GAAY,EAAE,CAAA;IAE3B,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,CAAQ;QAClD,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAA;KAC1B,CAAC,CAAA;IAEF,OAAO,SAAS,CAAA;CACjB,CAAA;AAoPD,MAAa,YAAY,GAAG,CAAC,IAAW,EAAE,CAAS;IACjD,IAAI,CAAC,GAAG,CAAC;QAAE,OAAO,IAAI,CAAA;IACtB,IAAI,aAAa,GAAY,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAA;IAChE,IAAI,CAAC,GAAG,aAAa,CAAC,MAAM,CAAA;IAC5B,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAA;IAEpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;QAC1B,IAAI,OAAO,GAAY,EAAE,CAAA;QACzB,IAAI,MAAM,GAAG,CAAC,CAAA;QACd,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;YAC/B,IAAI,KAAK,GAAG,MAAM,GAAG,EAAE,CAAA;YACvB,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC,CAAA;YAChC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAA;SACzB;QACD,aAAa,CAAC,CAAC,CAAC,GAAG,OAAO,CAAA;KAC3B;IACD,OAAO,aAAa,CAAA;CACrB,CAAA;;AC5nBM,IAAM,SAAS,GAAa,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;AAE5F,AAAO,IAAM,SAAS,GAAa,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;;AAGhD,AAAO,IAAM,gBAAgB,GAAwB;IACnD,GAAG,EAAE,CAAC;IACN,GAAG,EAAE,CAAC;IACN,IAAI,EAAE,CAAC;IACP,KAAK,EAAE,EAAE;CACV,CAAA;AAED,AA2CO,IAAM,YAAY,GAAa,EAAE,CAAC;AAEzC,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;AACnB,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;AACnB,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;AACnB,YAAY,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;AACpB,YAAY,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;AACpB,YAAY,CAAC,CAAC,CAAC,GAAG,GAAG,CAAA;AACrB,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;AACtB,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;AACtB,YAAY,CAAC,CAAC,CAAC,GAAG,KAAK,CAAA;AACvB,YAAY,CAAC,CAAC,CAAC,GAAG,KAAK,CAAA;AACvB,YAAY,CAAC,EAAE,CAAC,GAAG,MAAM,CAAA;AACzB,YAAY,CAAC,EAAE,CAAC,GAAG,MAAM,CAAA;AACzB,YAAY,CAAC,EAAE,CAAC,GAAG,OAAO,CAAA;AAE1B,AAAO,IAAM,YAAY,GAAa,EAAE,CAAA;AAExC,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;AACnB,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;AACnB,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;AACnB,YAAY,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;AACpB,YAAY,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;AACpB,YAAY,CAAC,CAAC,CAAC,GAAG,GAAG,CAAA;AACrB,YAAY,CAAC,CAAC,CAAC,GAAG,GAAG,CAAA;AACrB,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;AACtB,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;AACtB,YAAY,CAAC,CAAC,CAAC,GAAG,KAAK,CAAA;AACvB,YAAY,CAAC,EAAE,CAAC,GAAG,KAAK,CAAA;AACxB,YAAY,CAAC,EAAE,CAAC,GAAG,KAAK,CAAA;AACxB,YAAY,CAAC,EAAE,CAAC,GAAG,KAAK,CAAA;;;;AAKxB,AAAO,IAAM,aAAa,GAAa,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;AACrD,AAAO,IAAM,aAAa,GAAa,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;AACrD,AAAO,IAAM,aAAa,GAAa,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;AACrD,AAAO,IAAM,WAAW,GAAa,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;AAEnD,AAAO,IAAM,mBAAmB,GAAa,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;AAC3D,AAAO,IAAM,mBAAmB,GAAa,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;AAE3D,AAGA,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;IACnC,aAAa,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IACxC,aAAa,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IACxC,aAAa,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IACrC,WAAW,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IAEvC,IAAI,KAAK,GAAG,mBAAmB,CAAC,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;IAC9E,IAAI,KAAK,GAAG,mBAAmB,CAAC,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;CAG/E;AAED,AAAO,IAAM,SAAS,GAAe;IACnC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAChB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACf,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACf,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACf,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACf,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACf,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACf,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;IAChB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;IACjB,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;CACnB,CAAA;AAED,AAAO,IAAM,SAAS,GAAa,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAC9E,AAAO,IAAM,mBAAmB,GAAG,IAAI,CAAC;AACxC,AAAO,IAAM,kBAAkB,GAAG,IAAI,CAAC;AAGvC,AAgBA;;;;;;;KAQK;;AC/IE,IAAM,YAAY,GAAG,UAAC,CAAW;IACtC,IAAI,CAAC,GAAW,CAAC,CAAC,MAAM,CAAA;IACxB,IAAI,CAAC,GAAW,CAAC,CAAA;IACjB,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAClC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;KACV;IACD,OAAO,CAAC,CAAA;CACT,CAAA;AAED,AAiCO,IAAM,eAAe,GAAG,UAAC,QAAkB;IAChD,IAAI,KAAK,GAAGA,iBAAiC,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;IAC7D,IAAI,WAAW,GAAG,EAAE,CAAA;IACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;QACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACrC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;gBACnC,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,SAAK,KAAK,CAAC,CAAC,CAAC,EAAE,CAAA;aAC1D;SACF;KACF;IACD,OAAO,WAAW,CAAA;CACnB,CAAA;AAED,AAAO,IAAM,gBAAgB,GAAG,UAAC,QAAkB;IACjD,IAAI,MAAM,GAAGA,iBAAiC,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;IAE9D,MAAM,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,GAAG;QACvB,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE;YACrB,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;YACjB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;YACjB,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAA;SACd;KACF,CAAC,CAAA;IACF,MAAM,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;QACf,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAAE,OAAO,CAAC,CAAC,CAAA;QAC1B,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAAE,OAAO,CAAC,CAAA;QACzB,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAAE,OAAO,CAAC,CAAC,CAAA;QAC1B,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAAE,OAAO,CAAC,CAAA;QACzB,OAAO,CAAC,CAAA;KACT,CAAC,CAAA;IAEF,OAAO,MAAM,CAAA;CACd,CAAA;AAED,AAAO,IAAM,eAAe,GAAG,UAAC,QAAkB;IAChD,IAAI,KAAK,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAA;IACtC,IAAI,WAAW,GAAG,EAAE,CAAA;IAEpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;QACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACxC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;gBACnC,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;aACpF;SACF;KACF;IACD,OAAO,WAAW,CAAA;CACnB,CAAA;AAED,AAAO,IAAM,QAAQ,GAAG,UAAC,QAAkB;IACzC,IAAI,KAAK,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAA;IACtC,IAAI,IAAI,GAAG,EAAE,CAAA;IACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;QACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACrC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;gBACnC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,SAAK,KAAK,CAAC,CAAC,CAAC,EAAE,CAAA;aAChE;SACF;KACF;IACD,OAAO,IAAI,CAAA;CACZ,CAAA;AAED,AAAO,IAAM,aAAa,GAAG,UAAC,QAAkB;IAC9C,IAAI,UAAU,GAAGC,YAA4B,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAA,CAAC,CAAA;IACrF,OAAO,UAAU,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,GAAG;QAC9B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;KACrD,CAAC,CAAA;CACH,CAAA;AAED,AAAO,IAAM,SAAS,GAAG,UAAC,QAAkB;IAC1C,IAAI,KAAK,GAAGA,YAA4B,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAA,CAAC,CAAA;IAChF,OAAO,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,GAAG;QACzB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;KACrD,CAAC,CAAA;CACH,CAAA;AAED,AAAO,IAAM,aAAa,GAAG,UAAC,GAAa;IACzC,IAAI,IAAI,GAAG,IAAI,CAAA;IACf,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QACjC,OAAO,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;KACpD;IACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;QACnC,IAAI,GAAG,IAAI,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAA;KACzC;IACD,OAAO,IAAI,CAAA;CACZ,CAAA;AAED,AAQO,IAAM,eAAe,GAAG,UAAC,IAAgB;IAC9C,OAAO,IAAI,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,GAAG;QAC3B,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;KAC5B,CAAC,CAAA;CACH,CAAA;;ACxJD,IAAM,SAAS,GAAG,UAAC,CAAW,EAAE,GAAW,EAAE,aAA0B;IACnE,IAAI,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,GAAA,CAAC,CAAC,CAAA;IAC1E,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,CAAA;IAChC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACpC,OAAO,aAAa,CAAA;CACvB,CAAA;AAED,IAAM,oBAAoB,GAAG,UACzB,CAAW,EACX,GAAW,EACX,aAA0B,EAC1B,MAA6E;IAA7E,uBAAA,EAAA,SAAiBC,kBAA4B,GAAGC,mBAA6B;IAE7E,IAAI,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,GAAA,CAAC,CAAC,CAAA;IAC1E,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,MAAM,CAAA;IACzC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,CAAA;IAC7C,OAAO,aAAa,CAAA;CACvB,CAAA;AAED,AAAO,IAAM,sBAAsB,GAAG;IAClC,IAAM,iBAAiB,GAAgB;QACnC,MAAM,EAAE,EAAE;QACV,gBAAgB,EAAEC,gBAA0B;QAC5C,cAAc,EAAEC,YAAsB;QACtC,cAAc,EAAEC,SAAmB;QACnC,YAAY,EAAE,EAAE;KACnB,CAAA;;IAID,IAAMC,YAAS,GAAGC,SAAmB,CAAA;IACrC,IAAMC,YAAS,GAAGC,SAAmB,CAAA;IACrC,IAAMC,sBAAmB,GAAGR,mBAA6B,CAAA;IACzD,IAAI,SAAS,GAAGH,iBAAiC,CAACO,YAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;IAClE,IAAM,UAAU,GAAGK,eAAwB,CAAC,SAAS,CAAC,CAAA;IACtD,IAAM,YAAY,GAAGC,eAAwB,CAACN,YAAS,CAAC,CAAA;IACxD,IAAM,YAAY,GAAGO,eAAwB,CAACP,YAAS,CAAC,CAAA;IACxD,IAAM,OAAO,GAAGQ,QAAiB,CAACR,YAAS,CAAC,CAAA;IAC5C,IAAM,UAAU,GAAGS,aAAsB,CAACT,YAAS,CAAC,CAAA;IACpD,IAAM,KAAK,GAAGU,SAAkB,CAACV,YAAS,CAAC,CAAA;IAE3C,IAAI,GAAG,GAAG,CAAC,CAAA;IACX,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,GAAG,IAAI,UAAU,CAAC,MAAM,EAAE,CAAA;IACrD,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,GAAG,IAAI,YAAY,CAAC,MAAM,EAAE,CAAA;IACzD,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,GAAG,IAAI,YAAY,CAAC,MAAM,EAAE,CAAA;IACzD,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,GAAG,IAAI,OAAO,CAAC,MAAM,EAAE,CAAA;IAC/C,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,GAAG,IAAIE,YAAS,CAAC,MAAM,EAAE,CAAA;;IAEnD,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,GAAG,IAAIE,sBAAmB,EAAE,CAAA;IACpD,OAAO,CAAC,GAAG,CAAC,aAAa,GAAG,GAAG,IAAI,UAAU,CAAC,MAAM,EAAE,CAAA;IACtD,OAAO,CAAC,GAAG,CAAC,OAAO,GAAG,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE,CAAA;IAE3C,IAAI,aAAa,GAAG,UAAU,CAAC,MAAM,CAAC,YAAY,EAAE,YAAY,EAAE,OAAO,EAAEF,YAAS,CAAC,CAAC;IACtF,aAAa,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,GAAG;QACzB,OAAO,SAAS,CAAC,CAAC,EAAE,GAAG,EAAE,iBAAiB,CAAC,CAAC;KAC/C,CAAC,CAAC;IACH,IAAI,cAAc,GAAG,UAAU,CAAC,MAAM,CAAC,UAAU,EAAE,KAAK,EAAEA,YAAS,CAAC,CAAC;IACrE,cAAc,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,GAAG;QAC1B,OAAO,oBAAoB,CAAC,CAAC,EAAE,GAAG,EAAE,iBAAiB,CAAC,CAAC;KAC1D,CAAC,CAAC;;;;;;;;;IAUH,OAAO,iBAAiB,CAAA;CAC3B,CAAA;AAED,AAGA,IAAM,WAAW,GAAG,UAAC,IAAc,EAAE,QAAmB;IACpD,OAAO,IAAI,CAAC,GAAG,OAAR,IAAI,EAAQS,YAA4B,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,GAAA,CAAC,EAAC;CAChG,CAAA;AAED,AAEO,IAAM,sBAAsB,GAAG,UAAC,cAA2B;IAC9D,IAAM,wBAAwB,GAAgB;QAC1C,MAAM,EAAE,EAAE;QACV,gBAAgB,EAAE,EAAE;QACpB,iBAAiB,EAAE,EAAE;QACrB,cAAc,EAAEC,YAAsB;QACtC,cAAc,EAAEb,SAAmB;QACnC,YAAY,EAAE,EAAE;KACnB,CAAA;IACD,IAAI,OAAO,GAAW,CAAC,CAAC;IACxB,IAAMC,YAAS,GAAGC,SAAmB,CAAC;IACtC,IAAMY,eAAY,GAAG,wBAAwB,CAAC,cAAc,CAAC;IAG7DC,iBACsB,CAACd,YAAS,EAAE,CAAC,EAAE,CAAC,CAAC;SAClC,OAAO,CAAC,UAAC,IAAc,EAAE,CAAS;QAC/B,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAAa,eAAY,CAAC,IAAI,CAAC,GAAA,CAAC,CAAC;QAC9C,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,GAAA,CAAC,CAAC;QAC/D,IAAI,KAAK,GAAW,YAAY,CAAC,EAAE,CAAC,CAAC;QACrC,wBAAwB,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,WAAW,CAAC,EAAE,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC;QAEhF,OAAO,EAAE,CAAC;KACb,CAAC,CAAA;IACN,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;;;;;;;IAQpC,IAAM,iBAAiB,GAAG,wBAAwB,CAAC,iBAAiB,IAAI,EAAE,CAAC;IAE3E,IAAI,WAAW,GAAGE,YACD,CAACf,YAAS,EAAE,CAAC,CAAC,CAAC;IAChC,IAAI,UAAU,GAAGe,YACA,CAACf,YAAS,EAAE,CAAC,CAAC,CAAC;IAChC,IAAI,YAAY,GAAGe,YACF,CAACf,YAAS,EAAE,CAAC,CAAC,CAAC;IAEhC,WAAW,CAAC,MAAM,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC,OAAO,CAAC,UAAC,CAAC;QACnD,IAAI,EAAE,GAAa,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC;QAChE,IAAI,EAAE,GAAa,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,wBAAwB,CAAC,cAAc,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC;QAC1E,IAAI,KAAK,GAAG,YAAY,CAAC,EAAE,CAAC,CAAC;QAE7B,iBAAiB,CAAC,KAAK,CAAC,GAAG,WAAW,CAAC,EAAE,EAAE,cAAc,CAAC,MAAM,CAAC,GAAGL,kBAA4B,CAAC;KACpG,CAAC,CAAC;IAEH,IAAI,eAAe,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;IAChG,IAAI,cAAc,GAAe,EAAE,CAAC;IACpC,eAAe,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC;QACzB,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;KACpF,CAAC,CAAC;IACH,IAAI,gBAAgB,GAAe,EAAE,CAAC;IAEtC,cAAc,CAAC,OAAO,CAAC,UAAC,CAAC;QACrB,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;KACtF,CAAC,CAAC;IAGH,IAAM,gBAAgB,GAAG,wBAAwB,CAAC,gBAAgB,CAAC;;IAEnE,eAAe,CAAC,MAAM,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC,OAAO,CAAC,UAAC,CAAC;QAC/D,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;KAE5C,CAAC,CAAC;;;;IAMH,OAAO,wBAAwB,CAAC;CACnC,CAAA;;AC7JD,IAAM,cAAc,GAAG,sBAAsB,EAAE,CAAC;AAEhD,IAAM,uBAAuB,GAAG,sBAAsB,CAAC,cAAc,CAAC,CAAC;;;;;;;;;;;AAYvE,IAAa,GAAG,GAAG,UAAC,CAAS;IAC3B,OAAOqB,SAAyB,CAAC,CAAC,CAAC,CAAC;CACrC,CAAA;sDAGqD;;;;"}